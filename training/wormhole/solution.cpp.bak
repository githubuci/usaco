/*
ID: y2
TASK: wormhole
LANG: C++
*/

#include <algorithm>
#include <iostream>
#include <fstream>
#include <string>
#include <map>
#include <vector>
#include <set>
using namespace std;

int n;
int x[12];
int y[12];
int pairs[12];
int nrs[12];
int loops;

void pa(int a[]){
    for(int i=0; i<12; i++){
        cout << a[i] << " ";
    }
    cout << endl;
}

void sr(){
    for (int i=0; i<n; i++) {
        for(int j=0; j<n; j++){
            if(x[j] > x[i] && y[j] == y[i]) {
                if (nrs[i] == -1 || x[j] < x[nrs[i]]){
                    nrs[i] = j;
                }
            }
        }
    }  
}

void check(){
    for(int i=0; i<n; i++){
        int cur = i;
        for(int j=0; j< n; j++){
            // cout << "index " << i << ", step " << j << ", cur " << cur << endl;
            cur = nrs[cur];
            // cout << "index " << i << ", step " << j << ", cur after moving right " << cur << endl;
            if(cur == -1){
                break;
            }
            cur = pairs[cur];
            // cout << "index " << i << ", step " << j << ", cur after teleporting " << cur << endl;
        }
        if (cur != -1) {
            loops++;
            return;
        }
    }
    return;
}

void mp(){
    int f = 0;  // first point
    while(pairs[f]!= -1 && f < n) f++;
    if(f==n){
        // pa(pairs);
        check();
        // cout << "loops " << loops << endl;
        return;
    }
    for(int s=f+1; s<n; s++) {  // second point
        if(pairs[s] == -1) {
            pairs[f] = s, pairs[s] = f;
            mp();
            pairs[f] = pairs[s] = -1;
        }
    }
} 

int main(){
    ifstream fin("wormhole.in");
    ofstream fout("wormhole.out");
    fin >> n;
    for(int i=0; i< n; i++){
        fin >> x[i];
        fin >> y[i];
        pairs[i] = -1; 
        nrs[i] = -1;
    }
    sr();
    mp();
    fout << loops << endl;
    return 0;
}   